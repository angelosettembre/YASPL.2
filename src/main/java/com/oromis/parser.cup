package com.oromis;

import java_cup.runtime.*;
import com.oromis.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File(this.getClass().getResource("/input.txt").getFile());
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  }
  lexer = new Lexer(f,fis);
  System.out.println("Ciao");
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            HEAD, START, SEMI, INT, BOOL, DOUBLE, STRING,NAME,COMMA,DEF,LPAR,RPAR,COLON,
					LGPAR,RGPAR,READ,WRITE,PLUS,MINUS,TIMES,DIV,INT_CONST,DOUBLE_CONST,STRING_CONST,
					TRUE,FALSE,ASSIGN,IF,THEN,WHILE,DO,ELSE,GT,GE,LT,LE,EQ,NOT,AND,OR,UMINUS;


/* Non terminals */
non terminal            Programma,Decls,Statements,Var_decl,Type,Vars,Types,Def_decl,Var_decls,Par_decls,
			 			Body,Comp_stat,Stat,Simple_stat,Out_values,Exprs,Expr,Arith_op,Bool_expr,Bool_op,
			 			Rel_op,Func_exprs;

/* Precedences */


precedence left COMMA;
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence left TIMES, DIV;
precedence left PLUS, MINUS;
precedence right NOT;

/* The grammar rules */
Programma ::= HEAD Decls START Statements ;

Decls ::= Var_decl Decls
		|Def_decl Decls
		|
		;

Statements ::= Stat Statements
			|Stat
			;

Var_decl ::= Type Vars SEMI;

Type ::= INT
		|BOOL
		|DOUBLE
		|STRING
		;

Vars ::= NAME COMMA Vars
		|NAME
		;

Types ::= Type COMMA Types
		| Type
		;

Def_decl ::= DEF NAME LPAR Var_decls RPAR COLON Par_decls Body;

Var_decls ::= Var_decl Var_decls
			|
			;

Par_decls ::= Var_decl Par_decls
			|Var_decl
			;

Body ::= LGPAR Var_decls Statements RGPAR SEMI;

Comp_stat ::= LGPAR Statements RGPAR;

Stat ::= Comp_stat
		|Simple_stat
		;

Simple_stat ::= Vars READ Types SEMI
			| Out_values WRITE SEMI
			| NAME ASSIGN Expr SEMI
			| NAME LPAR Func_exprs COLON Vars RPAR SEMI
			| IF LPAR Bool_expr RPAR THEN Comp_stat ELSE Comp_stat SEMI
			| IF LPAR Bool_expr RPAR THEN Comp_stat SEMI
			| WHILE LPAR Bool_expr RPAR DO Comp_stat SEMI
			;

Out_values ::= Expr COMMA Out_values
			| STRING_CONST COMMA Out_values
			|Expr
			| STRING_CONST
			;

Exprs ::= Expr COMMA Exprs
		|Expr
		;

Expr ::= INT_CONST
		|DOUBLE_CONST
		|Expr Arith_op Expr
		|NAME
		|MINUS Expr %prec UMINUS
		|LPAR Expr RPAR
		;

Func_exprs::= Exprs
		|
		;

Arith_op ::= PLUS|MINUS|TIMES|DIV;

Bool_expr ::= TRUE
			|FALSE
			|Bool_expr Bool_op Bool_expr
			|NOT Bool_expr
			|Expr Rel_op Expr
			|LPAR Bool_expr RPAR		/*Modifica Grammatica */
			;

Bool_op ::= AND|OR;

Rel_op ::= GT|GE|LT|LE|EQ;
