
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 09 16:41:43 CET 2018
//----------------------------------------------------

package com.oromis;

import java_cup.runtime.*;
import com.oromis.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 09 16:41:43 CET 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\005\000\002\007\003\000\002\010\005\000\002\010" +
    "\003\000\002\011\012\000\002\012\004\000\002\012\002" +
    "\000\002\013\004\000\002\013\003\000\002\014\007\000" +
    "\002\015\005\000\002\016\003\000\002\016\003\000\002" +
    "\017\006\000\002\017\005\000\002\017\006\000\002\017" +
    "\011\000\002\017\013\000\002\017\011\000\002\017\011" +
    "\000\002\020\005\000\002\020\005\000\002\020\003\000" +
    "\002\020\003\000\002\021\005\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\005\000\002\022" +
    "\003\000\002\022\004\000\002\022\005\000\002\027\003" +
    "\000\002\027\002\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\005\000\002\024\004\000\002\024" +
    "\005\000\002\024\005\000\002\025\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\004\004\005\001\002\000\004\002\200\001" +
    "\002\000\016\005\ufffd\007\007\010\010\011\013\012\012" +
    "\015\016\001\002\000\004\013\103\001\002\000\010\006" +
    "\ufff9\013\ufff9\014\ufff9\001\002\000\010\006\ufff8\013\ufff8" +
    "\014\ufff8\001\002\000\016\005\ufffd\007\007\010\010\011" +
    "\013\012\012\015\016\001\002\000\010\006\ufff6\013\ufff6" +
    "\014\ufff6\001\002\000\010\006\ufff7\013\ufff7\014\ufff7\001" +
    "\002\000\016\005\ufffd\007\007\010\010\011\013\012\012" +
    "\015\016\001\002\000\004\005\172\001\002\000\004\013" +
    "\017\001\002\000\004\016\020\001\002\000\014\007\007" +
    "\010\010\011\013\012\012\017\uffef\001\002\000\004\017" +
    "\024\001\002\000\036\007\007\010\010\011\013\012\012" +
    "\013\uffef\016\uffef\017\uffef\021\uffef\026\uffef\031\uffef\032" +
    "\uffef\033\uffef\037\uffef\041\uffef\001\002\000\026\013\ufff0" +
    "\016\ufff0\017\ufff0\021\ufff0\026\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\037\ufff0\041\ufff0\001\002\000\004\020\025\001\002" +
    "\000\012\007\007\010\010\011\013\012\012\001\002\000" +
    "\004\021\031\001\002\000\014\007\007\010\010\011\013" +
    "\012\012\021\uffed\001\002\000\004\021\uffee\001\002\000" +
    "\034\007\007\010\010\011\013\012\012\013\uffef\016\uffef" +
    "\021\uffef\026\uffef\031\uffef\032\uffef\033\uffef\037\uffef\041" +
    "\uffef\001\002\000\016\005\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\015\ufff1\001\002\000\024\013\052\016\043\021" +
    "\035\026\034\031\037\032\051\033\042\037\045\041\036" +
    "\001\002\000\014\013\066\016\043\026\034\031\037\032" +
    "\051\001\002\000\024\013\052\016\043\021\035\026\034" +
    "\031\037\032\051\033\042\037\045\041\036\001\002\000" +
    "\004\016\161\001\002\000\042\006\uffdb\014\uffdb\017\uffdb" +
    "\020\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\052\uffdb\053\uffdb" +
    "\001\002\000\016\014\157\024\uffdf\025\070\026\072\027" +
    "\074\030\073\001\002\000\030\002\uffe9\013\uffe9\016\uffe9" +
    "\021\uffe9\022\uffe9\026\uffe9\031\uffe9\032\uffe9\033\uffe9\037" +
    "\uffe9\041\uffe9\001\002\000\006\014\155\024\uffde\001\002" +
    "\000\014\013\066\016\043\026\034\031\037\032\051\001" +
    "\002\000\004\022\152\001\002\000\004\016\114\001\002" +
    "\000\004\024\112\001\002\000\030\002\uffea\013\uffea\016" +
    "\uffea\021\uffea\022\uffea\026\uffea\031\uffea\032\uffea\033\uffea" +
    "\037\uffea\041\uffea\001\002\000\030\002\ufffb\013\052\016" +
    "\043\021\035\022\ufffb\026\034\031\037\032\051\033\042" +
    "\037\045\041\036\001\002\000\042\006\uffda\014\uffda\017" +
    "\uffda\020\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\052\uffda\053" +
    "\uffda\001\002\000\024\014\062\016\063\023\ufff4\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\036\064\001\002\000" +
    "\004\023\054\001\002\000\012\007\007\010\010\011\013" +
    "\012\012\001\002\000\006\006\ufff2\014\060\001\002\000" +
    "\004\006\057\001\002\000\030\002\uffe8\013\uffe8\016\uffe8" +
    "\021\uffe8\022\uffe8\026\uffe8\031\uffe8\032\uffe8\033\uffe8\037" +
    "\uffe8\041\uffe8\001\002\000\012\007\007\010\010\011\013" +
    "\012\012\001\002\000\004\006\ufff3\001\002\000\004\013" +
    "\103\001\002\000\016\013\066\016\043\020\uffd4\026\034" +
    "\031\037\032\051\001\002\000\014\013\066\016\043\026" +
    "\034\031\037\032\051\001\002\000\014\006\071\025\070" +
    "\026\072\027\074\030\073\001\002\000\042\006\uffd8\014" +
    "\uffd8\017\uffd8\020\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\052" +
    "\uffd8\053\uffd8\001\002\000\014\013\066\016\043\026\034" +
    "\031\037\032\051\001\002\000\014\013\uffd3\016\uffd3\026" +
    "\uffd3\031\uffd3\032\uffd3\001\002\000\030\002\uffe6\013\uffe6" +
    "\016\uffe6\021\uffe6\022\uffe6\026\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\037\uffe6\041\uffe6\001\002\000\014\013\uffd2\016\uffd2" +
    "\026\uffd2\031\uffd2\032\uffd2\001\002\000\014\013\uffd0\016" +
    "\uffd0\026\uffd0\031\uffd0\032\uffd0\001\002\000\014\013\uffd1" +
    "\016\uffd1\026\uffd1\031\uffd1\032\uffd1\001\002\000\042\006" +
    "\uffd9\014\uffd9\017\uffd9\020\uffd9\024\uffd9\025\070\026\072" +
    "\027\074\030\073\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\052\uffd9\053\uffd9\001\002\000\004\020\uffd5\001\002" +
    "\000\016\014\106\020\uffdc\025\070\026\072\027\074\030" +
    "\073\001\002\000\004\020\101\001\002\000\004\013\103" +
    "\001\002\000\004\017\104\001\002\000\012\006\ufff4\014" +
    "\062\017\ufff4\023\ufff4\001\002\000\004\006\105\001\002" +
    "\000\030\002\uffe5\013\uffe5\016\uffe5\021\uffe5\022\uffe5\026" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\037\uffe5\041\uffe5\001\002" +
    "\000\014\013\066\016\043\026\034\031\037\032\051\001" +
    "\002\000\004\020\uffdd\001\002\000\010\006\ufff5\017\ufff5" +
    "\023\ufff5\001\002\000\006\002\ufffc\022\ufffc\001\002\000" +
    "\004\006\113\001\002\000\030\002\uffe7\013\uffe7\016\uffe7" +
    "\021\uffe7\022\uffe7\026\uffe7\031\uffe7\032\uffe7\033\uffe7\037" +
    "\uffe7\041\uffe7\001\002\000\022\013\066\016\117\026\034" +
    "\031\037\032\051\034\116\035\121\051\122\001\002\000" +
    "\024\025\070\026\072\027\074\030\073\044\146\045\142" +
    "\046\150\047\145\050\144\001\002\000\010\017\uffcf\052" +
    "\uffcf\053\uffcf\001\002\000\022\013\066\016\117\026\034" +
    "\031\037\032\051\034\116\035\121\051\122\001\002\000" +
    "\010\017\130\052\124\053\126\001\002\000\010\017\uffce" +
    "\052\uffce\053\uffce\001\002\000\022\013\066\016\117\026" +
    "\034\031\037\032\051\034\116\035\121\051\122\001\002" +
    "\000\010\017\uffcc\052\uffcc\053\uffcc\001\002\000\022\013" +
    "\uffc9\016\uffc9\026\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9" +
    "\051\uffc9\001\002\000\022\013\066\016\117\026\034\031" +
    "\037\032\051\034\116\035\121\051\122\001\002\000\022" +
    "\013\uffc8\016\uffc8\026\uffc8\031\uffc8\032\uffc8\034\uffc8\035" +
    "\uffc8\051\uffc8\001\002\000\010\017\uffcd\052\124\053\126" +
    "\001\002\000\004\040\131\001\002\000\004\021\035\001" +
    "\002\000\006\006\134\043\133\001\002\000\004\021\035" +
    "\001\002\000\030\002\uffe3\013\uffe3\016\uffe3\021\uffe3\022" +
    "\uffe3\026\uffe3\031\uffe3\032\uffe3\033\uffe3\037\uffe3\041\uffe3" +
    "\001\002\000\004\006\136\001\002\000\030\002\uffe4\013" +
    "\uffe4\016\uffe4\021\uffe4\022\uffe4\026\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\037\uffe4\041\uffe4\001\002\000\026\017\147\025" +
    "\070\026\072\027\074\030\073\044\146\045\142\046\150" +
    "\047\145\050\144\001\002\000\010\017\141\052\124\053" +
    "\126\001\002\000\010\017\uffca\052\uffca\053\uffca\001\002" +
    "\000\014\013\uffc6\016\uffc6\026\uffc6\031\uffc6\032\uffc6\001" +
    "\002\000\014\013\066\016\043\026\034\031\037\032\051" +
    "\001\002\000\014\013\uffc3\016\uffc3\026\uffc3\031\uffc3\032" +
    "\uffc3\001\002\000\014\013\uffc4\016\uffc4\026\uffc4\031\uffc4" +
    "\032\uffc4\001\002\000\014\013\uffc7\016\uffc7\026\uffc7\031" +
    "\uffc7\032\uffc7\001\002\000\042\006\uffd6\014\uffd6\017\uffd6" +
    "\020\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\052\uffd6\053\uffd6" +
    "\001\002\000\014\013\uffc5\016\uffc5\026\uffc5\031\uffc5\032" +
    "\uffc5\001\002\000\020\017\uffcb\025\070\026\072\027\074" +
    "\030\073\052\uffcb\053\uffcb\001\002\000\004\006\153\001" +
    "\002\000\016\005\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\015\uffec\001\002\000\014\017\147\025\070\026\072\027" +
    "\074\030\073\001\002\000\016\013\066\016\043\026\034" +
    "\031\037\032\051\033\042\001\002\000\004\024\uffe0\001" +
    "\002\000\016\013\066\016\043\026\034\031\037\032\051" +
    "\033\042\001\002\000\004\024\uffe1\001\002\000\022\013" +
    "\066\016\117\026\034\031\037\032\051\034\116\035\121" +
    "\051\122\001\002\000\010\017\163\052\124\053\126\001" +
    "\002\000\004\042\164\001\002\000\004\021\035\001\002" +
    "\000\004\006\166\001\002\000\030\002\uffe2\013\uffe2\016" +
    "\uffe2\021\uffe2\022\uffe2\026\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\037\uffe2\041\uffe2\001\002\000\004\022\170\001\002\000" +
    "\034\002\uffeb\006\uffeb\013\uffeb\016\uffeb\021\uffeb\022\uffeb" +
    "\026\uffeb\031\uffeb\032\uffeb\033\uffeb\037\uffeb\041\uffeb\043" +
    "\uffeb\001\002\000\042\006\uffd7\014\uffd7\017\uffd7\020\uffd7" +
    "\024\uffd7\025\070\026\072\027\074\030\073\044\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\052\uffd7\053\uffd7\001\002" +
    "\000\024\013\052\016\043\021\035\026\034\031\037\032" +
    "\051\033\042\037\045\041\036\001\002\000\004\002\001" +
    "\001\002\000\004\005\uffff\001\002\000\004\005\ufffe\001" +
    "\002\000\004\006\177\001\002\000\042\005\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\021\ufffa\026\ufffa\031\ufffa\032\ufffa\033\ufffa\037\ufffa" +
    "\041\ufffa\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\014\005\013\006\005\011\010\001\001\000\004" +
    "\007\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\174\005\013\006\005\011\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\173\005\013\006" +
    "\005\011\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\021\006\005\012\020\001" +
    "\001\000\002\001\001\000\010\005\021\006\005\012\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\026\006\005\013\025\001\001\000\004\014\031\001\001" +
    "\000\010\005\026\006\005\013\027\001\001\000\002\001" +
    "\001\000\010\005\021\006\005\012\032\001\001\000\002" +
    "\001\001\000\020\004\043\007\052\015\046\016\047\017" +
    "\040\020\045\022\037\001\001\000\004\022\170\001\001" +
    "\000\020\004\166\007\052\015\046\016\047\017\040\020" +
    "\045\022\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\110\007\052\015\046\016\047\017\040\020\045\022\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\054\010\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\054\010" +
    "\060\001\001\000\002\001\001\000\004\007\107\001\001" +
    "\000\010\021\075\022\076\027\077\001\001\000\004\022" +
    "\064\001\001\000\004\023\066\001\001\000\002\001\001" +
    "\000\004\022\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\066\001\001\000\002\001\001\000\004\023" +
    "\066\001\001\000\002\001\001\000\004\007\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\106\022\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\114\024\117\001\001" +
    "\000\006\023\066\026\142\001\001\000\002\001\001\000" +
    "\006\022\136\024\137\001\001\000\004\025\124\001\001" +
    "\000\002\001\001\000\006\022\114\024\122\001\001\000" +
    "\004\025\124\001\001\000\002\001\001\000\006\022\114" +
    "\024\126\001\001\000\002\001\001\000\004\025\124\001" +
    "\001\000\002\001\001\000\004\015\131\001\001\000\002" +
    "\001\001\000\004\015\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\066\026\142" +
    "\001\001\000\004\025\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\066\001\001\000\006\020" +
    "\155\022\037\001\001\000\002\001\001\000\006\020\157" +
    "\022\037\001\001\000\002\001\001\000\006\022\114\024" +
    "\161\001\001\000\004\025\124\001\001\000\002\001\001" +
    "\000\004\015\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\066" +
    "\001\001\000\020\004\172\007\052\015\046\016\047\017" +
    "\040\020\045\022\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File(this.getClass().getResource("/input.txt").getFile());
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  }
  lexer = new Lexer(f,fis);
  System.out.println("Ciao");

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


  protected Lexer lexer;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Rel_op ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Rel_op ::= LE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Rel_op ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Rel_op ::= GE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Rel_op ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Bool_op ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Bool_op ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bool_expr ::= LPAR Bool_expr RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bool_expr ::= Expr Rel_op Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bool_expr ::= NOT Bool_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bool_expr ::= Bool_expr Bool_op Bool_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bool_expr ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bool_expr ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Arith_op ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Arith_op ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Arith_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Arith_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Func_exprs ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Func_exprs",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Func_exprs ::= Exprs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Func_exprs",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= Expr Arith_op Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= DOUBLE_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= INT_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exprs ::= Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exprs ::= Expr COMMA Exprs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Out_values ::= STRING_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Out_values ::= Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Out_values ::= STRING_CONST COMMA Out_values 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Out_values ::= Expr COMMA Out_values 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Simple_stat ::= WHILE LPAR Bool_expr RPAR DO Comp_stat SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Simple_stat ::= IF LPAR Bool_expr RPAR THEN Comp_stat SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Simple_stat ::= IF LPAR Bool_expr RPAR THEN Comp_stat ELSE Comp_stat SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Simple_stat ::= NAME LPAR Func_exprs COLON Vars RPAR SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Simple_stat ::= NAME ASSIGN Expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Simple_stat ::= Out_values WRITE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Simple_stat ::= Vars READ Types SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stat ::= Simple_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stat ::= Comp_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Comp_stat ::= LGPAR Statements RGPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comp_stat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Body ::= LGPAR Var_decls Statements RGPAR SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Par_decls ::= Var_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Par_decls ::= Var_decl Par_decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Var_decls ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Var_decls ::= Var_decl Var_decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Def_decl ::= DEF NAME LPAR Var_decls RPAR COLON Par_decls Body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Types ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Types ::= Type COMMA Types 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Vars ::= NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Vars ::= NAME COMMA Vars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Var_decl ::= Type Vars SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statements ::= Stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statements ::= Stat Statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= Def_decl Decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= Var_decl Decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= HEAD Decls START Statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

